name: Unit Tests

# Compile MET and run unit tests
# for pull requests into develop branch

on:
  pull_request:
    types: [opened, reopened]
    branches:
      - develop
  push:
    branches:
      - 'feature_1546_ci_testing'

jobs:

  job_control:
    name: Determine which jobs to run
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set job controls
        id: job_status
        run: .github/jobs/set_job_controls.sh
        env:
          commit_msg: ${{ github.event.head_commit.message }}

    outputs:
      run_compile: ${{ steps.job_status.outputs.run_compile }}
      run_push: ${{ steps.job_status.outputs.run_push }}
      run_unit_tests: ${{ steps.job_status.outputs.run_unit_tests }}
      met_base_image: ${{ steps.job_status.outputs.met_base_image }}
      dockerhub_repo: ${{ steps.job_status.outputs.dockerhub_repo }}
      branch_name: ${{ steps.job_status.outputs.branch_name }}

  compile:
    name: Compile MET
    runs-on: ubuntu-latest
    needs: job_control
    if: ${{ needs.job_control.outputs.run_compile == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Create directories to store output
        run: mkdir -p ${RUNNER_WORKSPACE}/logs

      - name: Compile MET in Docker
        run: .github/jobs/build_docker_image.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          MET_BASE_IMAGE: ${{ needs.job_control.outputs.met_base_image }}

      - name: Copy Docker build log into logs directory
        if: always()
        run: cp ${GITHUB_WORKSPACE}/docker_build.log ${RUNNER_WORKSPACE}/logs/

      - name: Push Docker Image
        run: .github/jobs/push_docker_image.sh
        if: ${{ needs.job_control.outputs.run_push == 'true' }}
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore

  unit_tests:
    name: Run MET Unit Tests
    runs-on: ubuntu-latest
    #needs: [job_control, compile]
    needs: [job_control]
    if: ${{ needs.job_control.outputs.run_unit_tests == 'true' }}
    strategy:
      matrix:
        tests:
          - "gaussian aeronet"
          - "airnow"
      fail-fast: false
    steps:
      - uses: actions/checkout@v2

      - name: Create directories to store output
        run: |
          mkdir -p ${{ runner.workspace }}/logs
          mkdir -p ${{ runner.workspace }}/diff

      - name: Pull MET Image from DockerHub
        run: .github/jobs/pull_docker_image.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}

      - name: Get test input data from DockerHub
        run: .github/jobs/get_test_input_data.sh
        env:
          DATA_VERSION: develop

      - name: Get test truth data from DockerHub
        run: .github/jobs/get_test_truth_data.sh
        env:
          DATA_VERSION: develop

      - name: Run Unit Tests in Docker
        run: .github/jobs/run_unit_docker.sh
        env:
          DOCKERHUB_REPO: ${{ needs.job_control.outputs.dockerhub_repo }}
          SOURCE_BRANCH: ${{ needs.job_control.outputs.branch_name }}
          TESTS: ${{ matrix.tests }}

      - name: Upload diff files as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: diff
          path: ${{ runner.workspace }}/diff
          if-no-files-found: ignore

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: ${{ runner.workspace }}/logs
          if-no-files-found: ignore
